#!/usr/bin/env bash 
#
# Desc

## Globals
BOLD=$(tput bold)
NORMAL=$(tput sgr0)


## Common functions
err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
}


## Option parsing
PARAMS=""
DRY_RUN=0

while (( "$#" )); do
  case "$1" in
    -d|--dry-run)
	DRY_RUN=1
      shift 1
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"


## Packages

ask_action () {
  local prompt="$1"
  local allowed="$2"

  local response
  read -p "$prompt"$'\n' response

  local code="$(echo ${response:0:1} | tr '[:upper:]' '[:lower:]')"

  if [[ "$code" =~ $allowed ]]; then
    echo $code
  fi
}

print_set () {
  local dir="$1"
  local pkg_file="$2"
  local pkg_set="$(basename $pkg_file)"

  # Print header for the package set
  echo
  echo "--- Set: ${dir}/${BOLD}${pkg_set}${NORMAL}"

  # Print contents of set, with two space indent
  cat $pkg_file | column -x -c 40 | sed 's/^/  /'
  echo
}

edit_set () {
  local pkg_file="$1"
  local -n set_pkgs="$2"

  # Read lines from pkg file on unit 3
  while read -r -u 3 line; do
    printf '\n%s\n' $line
    local action=$(ask_action 'y/n?' '[yn]')
    
    if [[ "$action" == "y" ]]; then
      set_pkgs+=$line
      printf 'Adding %s to list\n' $line
    fi

  done 3< $pkg_file
}


# Construct package list
build_list () {
  local -n all_items="$1"
  local dir="$2"

  for item_file in ${dir}/*; do
  
    print_set "$dir" "$item_file"
  
    action=$(ask_action '(I)nstall, (S)kip, or (E)dit?' '[ies]')
  
    case "$action" in 
      i)
        mapfile -t -O "${#all_items[@]}" all_items < "$item_file"
        ;;
      e)
        edit_set "$item_file" all_items
        ;;
      *)
        continue
        ;;
    esac
  done
}

install_packages () {
  local -n install_pkgs="$1"

  for pkg in "${install_pkgs[@]}"; do
    sudo apt install -y "$pkg"
  done
}

pkgs=()
build_list pkgs "packages"
install_packages pkgs

snaps=()
build_list snaps "snaps"

printf '%s\n' "${snaps[@]}"

